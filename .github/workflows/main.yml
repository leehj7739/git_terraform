name: Terraform CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  TF_VAR_password: ${{ secrets.TF_VAR_PASSWORD }}
  TF_VAR_tenant_name: ${{ secrets.TF_VAR_TENANT_NAME }}
  TF_VAR_username: ${{ secrets.TF_VAR_USERNAME }}
  TF_VAR_region: kr-central-2

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Debug Environment Variables
        run: |
          echo "TF_VAR_username: ${{ env.TF_VAR_username }}"
          echo "TF_VAR_tenant_name: ${{ env.TF_VAR_tenant_name }}"
          echo "TF_VAR_password: ${{ env.TF_VAR_password != '' }}"
          echo "Region: kr-central-2"
          echo "Domain: kc-kdt-sfacspace2025"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: .github/lab-terraform-modules
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          cd .github/lab-terraform-modules
          terraform init
        env:
          TF_VAR_username: ${{ secrets.OS_USERNAME }}
          TF_VAR_password: ${{ secrets.OS_PASSWORD }}
          TF_VAR_tenant_name: ${{ secrets.OS_TENANT_NAME }}
          TF_VAR_region: ${{ env.TF_VAR_region }}

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: .github/lab-terraform-modules

      - name: Terraform Plan
        id: plan
        run: |
          cd .github/lab-terraform-modules
          terraform plan -no-color
        env:
          TF_VAR_username: ${{ secrets.OS_USERNAME }}
          TF_VAR_password: ${{ secrets.OS_PASSWORD }}
          TF_VAR_tenant_name: ${{ secrets.OS_TENANT_NAME }}
          TF_VAR_region: ${{ env.TF_VAR_region }}
        continue-on-error: true

      - name: Debug Outputs
        run: |
          cd .github/lab-terraform-modules
          terraform output

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          cd .github/lab-terraform-modules
          terraform apply -auto-approve
        env:
          TF_VAR_username: ${{ secrets.OS_USERNAME }}
          TF_VAR_password: ${{ secrets.OS_PASSWORD }}
          TF_VAR_tenant_name: ${{ secrets.OS_TENANT_NAME }}
          TF_VAR_region: ${{ env.TF_VAR_region }}

      - name: Get Instance IP
        if: github.ref == 'refs/heads/main'
        run: |
          cd .github/lab-terraform-modules
          INSTANCE_IP=$(terraform output -raw instance_ip)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      - name: Check FastAPI Server
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Waiting for FastAPI server to start..."
          sleep 60
          curl -f http://${{ env.INSTANCE_IP }}/hello || exit 1

      - name: Update Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            #### Terraform Validation ðŸ¤–\`${{ steps.validate.outcome }}\`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: output
            }) 
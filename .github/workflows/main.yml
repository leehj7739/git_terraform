name: Terraform CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  TF_VAR_PASSWORD: ${{ secrets.OPENSTACK_PASSWORD }}
  TF_VAR_TENANT_NAME: ${{ secrets.OPENSTACK_TENANT_NAME }}
  TF_VAR_USERNAME: ${{ secrets.OPENSTACK_USERNAME }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: |
          cd .github/lab-terraform-modules
          terraform init

      - name: Terraform Plan
        run: |
          cd .github/lab-terraform-modules
          terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          cd .github/lab-terraform-modules
          terraform apply -auto-approve

      - name: Get Instance IP
        run: |
          cd .github/lab-terraform-modules
          INSTANCE_IP=$(terraform output -raw instance_ip)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      - name: Check FastAPI Server
        run: |
          echo "Waiting for FastAPI server to start..."
          sleep 60
          curl -f http://${{ env.INSTANCE_IP }}/hello || exit 1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: .github/lab-terraform-modules
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: .github/lab-terraform-modules

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: output
            }) 